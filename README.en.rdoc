= Sinatra

# Sinatra is a DSL for quickly creating web-applications in Ruby with minimal
# effort:
Sinatraは最小限の記述で素早くWebアプリケーションを記述するためのRubyによるDSLです:

  # myapp.rb
  require 'rubygems'
  require 'sinatra'
  get '/' do
    'Hello world!'
  end

# Install the gem and run with:
Gemをインストールして以下のように実行します:

  sudo gem install sinatra
  ruby myapp.rb

# View at: http://localhost:4567
http://localhost:4567 にアクセスすることによって動作を確認できます

== Routes

# In Sinatra, a route is an HTTP method paired with an URL matching pattern.
RouteはHTTPメソッドと対になったURLにマッチするパターンです
# Each route is associated with a block:
それぞれのルートはブロックをともないます:

  get '/' do
    .. 何かを表示 ..
  end

  post '/' do
    .. 何かを作成 ..
  end

  put '/' do
    .. 何かを更新 ..
  end

  delete '/' do
    .. 何かを削除 ..
  end

# Routes are matched in the order they are defined. The first route that
Routeは定義された順にマッチングが行われ、
# matches the request is invoked.
最初にマッチしたものが実行されます

# Route patterns may include named parameters, accessible via the
Routeパターンは名前付きパラメータを持つことができ、それらには
# <tt>params</tt> hash:
<tt>params</tt>ハッシュによってアクセスできます:

  get '/hello/:name' do
    # "GET /foo" や "GET /bar" にマッチする
    # params[:name] は 'foo' か 'bar' が格納されている
    "Hello #{params[:name]}!"
  end

# You can also access named parameters via block parameters:
また、ブロック引数としても取得することもできます:

  get '/hello/:name' do |n|
    "Hello #{n}!"
  end

# Route patterns may also include splat (or wildcard) parameters, accessible
Routeパターンはsplat(ワイルドカード)パラメータを持つことができ、
# via the <tt>params[:splat]</tt> array.
配列<tt>params['splat']</tt>によってアクセスできます

  get '/say/*/to/*' do
    # /say/hello/to/world にマッチする
    params[:splat] # => ["hello", "world"]
  end

  get '/download/*.*' do
    # /download/path/to/file.xml にマッチする
    params[:splat] # => ["path/to/file", "xml"]
  end

# Route matching with Regular Expressions:
正規表現によるマッチも可能です

  get %r{/hello/([\w]+)} do
    "Hello, #{params[:captures].first}!"
  end

# Or with a block parameter:
ブロック引数によってアクセスできます:

  get %r{/hello/([\w]+)} do |c|
    "Hello, #{c}!"
  end

# Routes may include a variety of matching conditions, such as the user agent:
Routeにはマッチングに使用するいくつかの状態を指定してすることができます.
例えばユーザエージェントを指定して:

  get '/foo', :agent => /Songbird (\d\.\d)[\d\/]*?/ do
    "あなたは Songbird version #{params[:agent][0]} を利用しています"
  end

  get '/foo' do
    # Songbird以外のブラウザにマッチ
  end

== Static Files

# Static files are served from the <tt>./public</tt> directory. You can specify
静的なファイルは<tt>./public</tt>ディレクトリから提供されます. <tt>:public</tt>
# a different location by setting the <tt>:public</tt> option:
オプションを指定することによって任意のディレクトリを指定することもできます:

  set :public, File.dirname(__FILE__) + '/static'

# Note that the public directory name is not included in the URL. A file
注意すべき点として、パブリックディレクトリの名前はURLに含まれません.
# <tt>./public/css/style.css</tt> is made available as
つまり<tt>./public/css/style.css</tt>というファイルは
# <tt>http://example.com/css/style.css</tt>.
<tt>http://example.com/css/style.css</tt> として公開されます.

== Views / Templates

# Templates are assumed to be located directly under the <tt>./views</tt>
テンプレートは<tt>./views</tt>に配置されていると仮定しているが、
# directory. To use a different views directory:
以下のようにして別のディレクトリを指定することも出来る:

  set :views, File.dirname(__FILE__) + '/templates'

# One important thing to remember is that you always have to reference
忘れてはいけないことはテンプレートはシンボルで参照するということだ。
# templates with symbols, even if they're in a subdirectory (in this
たとえサブディレクトリに配置していたとしても（例えばこんな具合だ
# case use <tt>:'subdir/template'</tt>). Rendering methods will render
<tt>:'subdir/template'</tt>). レンダーメソッドに文字列を渡したところで
# any strings passed to them directly.
一切レンダリングしない.

=== Haml Templates

# The haml gem/library is required to render HAML templates:
HAMLテンプレートをレンダリングするためにはhaml gemをrequireする必要がある:

#  ## You'll need to require haml in your app
  ## あなたのアプリケーション内でrequire 'haml' しなければならない
  require 'haml'

  get '/' do
    haml :index
  end

# Renders <tt>./views/index.haml</tt>.
<tt>./views/indes.haml</tt>をレンダリングします

# {Haml's options}[http://haml.hamptoncatlin.com/docs/rdoc/classes/Haml.html]
{Haml's options}[http://haml.hamptoncatlin.com/docs/rdoc/classes/Haml.html]
# can be set globally through Sinatra's configurations,
はSinatraのConfigurationsを用いてグローバルに設定することが可能である
# see {Options and Configurations}[http://www.sinatrarb.com/configuration.html],
くわしくは {Options and Configurations}[http://www.sinatrarb.com/configuration.html],
# and overridden on an individual basis.
を見てください. またレンダリング時に個別に上書きして設定することも出来ます

  set :haml, {:format => :html5 } # デフォルトのHamlフォーマットは:xhtmlです

  get '/' do
    haml :index, :haml_options => {:format => :html4 } # 上書き
  end


=== Erb Templates

#  ## You'll need to require erb in your app
  ## あなたのアプリケーション内でrequire 'erb' しなければならない
  require 'erb'

  get '/' do
    erb :index
  end

# Renders <tt>./views/index.erb</tt>
<tt>./views/indes.erb</tt>をレンダリングします

=== Builder Templates

# The builder gem/library is required to render builder templates:
Builderテンプレートをレンダリングするにはbuilder gemをrequireする必要ああります:

#  ## You'll need to require builder in your app
  ## あなたのアプリケーション内でrequire 'buildr' しなければならない
  require 'builder'

  get '/' do
    content_type 'application/xml', :charset => 'utf-8'
    builder :index
  end

# Renders <tt>./views/index.builder</tt>.
<tt>./views/indes.builder</tt>をレンダリングします

=== Sass Templates

The sass gem/library is required to render Sass templates:

  ## You'll need to require haml or sass in your app
  require 'sass'

  get '/stylesheet.css' do
    content_type 'text/css', :charset => 'utf-8'
    sass :stylesheet
  end

Renders <tt>./views/stylesheet.sass</tt>.

{Sass' options}[http://haml.hamptoncatlin.com/docs/rdoc/classes/Sass.html]
can be set globally through Sinatra's configurations,
see {Options and Configurations}[http://www.sinatrarb.com/configuration.html],
and overridden on an individual basis.

  set :sass, {:style => :compact } # default Sass style is :nested

  get '/stylesheet.css' do
    content_type 'text/css', :charset => 'utf-8'
    sass :stylesheet, :sass_options => {:style => :expanded } # overridden
  end


=== Inline Templates

  get '/' do
    haml '%div.title Hello World'
  end

Renders the inlined template string.

=== Accessing Variables in Templates

Templates are evaluated within the same context as route handlers. Instance
variables set in route handlers are direcly accessible by templates:

  get '/:id' do
    @foo = Foo.find(params[:id])
    haml '%h1= @foo.name'
  end

Or, specify an explicit Hash of local variables:

  get '/:id' do
    foo = Foo.find(params[:id])
    haml '%h1= foo.name', :locals => { :foo => foo }
  end

This is typically used when rendering templates as partials from within
other templates.

=== In-file Templates

Templates may be defined at the end of the source file:

  require 'rubygems'
  require 'sinatra'

  get '/' do
    haml :index
  end

  __END__

  @@ layout
  %html
    = yield

  @@ index
  %div.title Hello world!!!!!

NOTE: In-file templates defined in the source file that requires sinatra
are automatically loaded. Call the <tt>use_in_file_templates!</tt>
method explicitly if you have in-file templates in other source files.

=== Named Templates

Templates may also be defined using the top-level <tt>template</tt> method:

  template :layout do
    "%html\n  =yield\n"
  end

  template :index do
    '%div.title Hello World!'
  end

  get '/' do
    haml :index
  end

If a template named "layout" exists, it will be used each time a template
is rendered. You can disable layouts by passing <tt>:layout => false</tt>.

  get '/' do
    haml :index, :layout => !request.xhr?
  end

== Helpers

# Use the top-level <tt>helpers</tt> method to define helper methods for use in
<tt>helpers</tt>メソッドを使うことによって、Routeハンドラや
# route handlers and templates:
テンプレートで利用できるhelperメソッドを定義できます:

  helpers do
    def bar(name)
      "#{name}bar"
    end
  end

  get '/:name' do
    bar(params[:name])
  end

== Filters

# Before filters are evaluated before each request within the context of the
Before filterは各リクエストを評価する前に、そのリクエストのコンテキストにおいて
# request and can modify the request and response. Instance variables set in
実行され、任意の処理を行ったりrequestやresponseを修正することが可能です
# filters are accessible by routes and templates:
Before filterにおいて定義したインスタンス変数はテンプレートや、ルートからアクセスできます:

  before do
    @note = 'Hi!'
    request.path_info = '/foo/bar/baz'
  end

  get '/foo/*' do
    @note #=> 'Hi!'
    params[:splat] #=> 'bar/baz'
  end

== Halting

# To immediately stop a request during a before filter or route use:
以下のようにしてBefore filterやRouteの処理中にリクエストを直ちに
中止することができます:

  halt

# You can also specify a body when halting ...
# FIXME: 本体はおかしい
また、特定の本体を指定することもできます

  halt 'ここが本体になります'

# Or set the status and body ...
さらにステータスコードを指定することも出来ます

  halt 401, 'あっちへ行け！'

== Passing

# A route can punt processing to the next matching route using <tt>pass</tt>:
<tt>pass</tt>を使うことでrouteは次のrouteへ処理をゆだねることができる

  get '/guess/:who' do
    pass unless params[:who] == 'Frank'
    "みつかった！"
  end

  get '/guess/*' do
    "残念でした"
  end

# The route block is immediately exited and control continues with the next
routeは直ちに処理を中止して次にマッチしたrouteに処理を移します
# matching route. If no matching route is found, a 404 is returned.
もしマッチするrouteが見つからなかった場合は404が返されます

== Configuration

Run once, at startup, in any environment:

  configure do
    ...
  end

Run only when the environment (RACK_ENV environment variable) is set to
<tt>:production</tt>:

  configure :production do
    ...
  end

Run when the environment is set to either <tt>:production</tt> or
<tt>:test</tt>:

  configure :production, :test do
    ...
  end

== Error handling

Error handlers run within the same context as routes and before filters, which
means you get all the goodies it has to offer, like <tt>haml</tt>, <tt>erb</tt>,
<tt>halt</tt>, etc.

=== Not Found

When a <tt>Sinatra::NotFound</tt> exception is raised, or the response's status
code is 404, the <tt>not_found</tt> handler is invoked:

  not_found do
    'This is nowhere to be found'
  end

=== Error

The +error+ handler is invoked any time an exception is raised from a route
block or before filter. The exception object can be obtained from the
<tt>sinatra.error</tt> Rack variable:

  error do
    'Sorry there was a nasty error - ' + env['sinatra.error'].name
  end

Custom errors:

  error MyCustomError do
    'So what happened was...' + request.env['sinatra.error'].message
  end

Then, if this happens:

  get '/' do
    raise MyCustomError, 'something bad'
  end

You get this:

  So what happened was... something bad

Sinatra installs special <tt>not_found</tt> and <tt>error</tt> handlers when
running under the development environment.

== Mime types

When using <tt>send_file</tt> or static files you may have mime types Sinatra
doesn't understand. Use +mime+ to register them by file extension:

  mime :foo, 'text/foo'

== Rack Middleware

Sinatra rides on Rack[http://rack.rubyforge.org/], a minimal standard
interface for Ruby web frameworks. One of Rack's most interesting capabilities
for application developers is support for "middleware" -- components that sit
between the server and your application monitoring and/or manipulating the
HTTP request/response to provide various types of common functionality.

Sinatra makes building Rack middleware pipelines a cinch via a top-level
+use+ method:

  require 'sinatra'
  require 'my_custom_middleware'

  use Rack::Lint
  use MyCustomMiddleware

  get '/hello' do
    'Hello World'
  end

The semantics of +use+ are identical to those defined for the
Rack::Builder[http://rack.rubyforge.org/doc/classes/Rack/Builder.html] DSL
(most frequently used from rackup files). For example, the +use+ method
accepts multiple/variable args as well as blocks:

  use Rack::Auth::Basic do |username, password|
    username == 'admin' && password == 'secret'
  end

Rack is distributed with a variety of standard middleware for logging,
debugging, URL routing, authentication, and session handling. Sinatra uses
many of of these components automatically based on configuration so you
typically don't have to +use+ them explicitly.

== Testing

# The Sinatra::Test mixin and Sinatra::TestHarness class include a variety of
Sinatra::TestミックスインとSinatra::TestHarnessクラスはSinatraアプリケーション
# helper methods for testing your Sinatra app:
のテストに利用できる豊富なヘルパーメソッドを用意しています:

  require 'my_sinatra_app'
  require 'test/unit'
  require 'sinatra/test'

  class MyAppTest < Test::Unit::TestCase
    include Sinatra::Test

    def test_my_default
      get '/'
      assert_equal 'Hello World!', @response.body
    end

    def test_with_params
      get '/meet', {:name => 'Frank'}
      assert_equal 'Hello Frank!', @response.body
    end

    def test_with_rack_env
      get '/', {}, :agent => 'Songbird'
      assert_equal "You're using Songbird!", @response.body
    end
  end

# See http://www.sinatrarb.com/testing.html for more on Sinatra::Test and using it
さらに http://www.sinatrarb.com/testing.html にSinatra::Testを使った例や、RSpecや
# with other test frameworks such as RSpec, Bacon, and test/spec.
Bacon, test/specのような他のテストフレームワークを利用した例があります

== Command line

# Sinatra applications can be run directly:
Sinatraで作成したアプリケションは直接起動することができます:

  ruby myapp.rb [-h] [-x] [-e ENVIRONMENT] [-p PORT] [-s HANDLER]

# Options are:
以下のようなコマンドラインオプションが利用できます:

#   -h # help
  -h # ヘルプを表示
#   -p # set the port (default is 4567)
  -p # 使用するポートを指定 (デフォルト 4567)
#   -e # set the environment (default is development)
  -e # 実行環境を指定 (デフォルト development)
#   -s # specify rack server/handler (default is thin)
  -s # 使用するサーバ／ハンドラを指定 (デフォルト thin)
#   -x # turn on the mutex lock (default is off)
  -x # Mutexによるロックを使用する (デフォルト off)

== The Bleeding Edge

If you would like to use Sinatra's latest bleeding code, create a local
clone and run your app with the <tt>sinatra/lib</tt> directory on the
<tt>LOAD_PATH</tt>:

  cd myapp
  git clone git://github.com/sinatra/sinatra.git
  ruby -Isinatra/lib myapp.rb

Alternatively, you can add the <tt>sinatra/lib<tt> directory to the
<tt>LOAD_PATH</tt> in your application:

  $LOAD_PATH.unshift File.dirname(__FILE__) + '/sinatra/lib'
  require 'rubygems'
  require 'sinatra'

  get '/about' do
    "I'm running version " + Sinatra::VERSION
  end

To update the Sinatra sources in the future:

  cd myproject/sinatra
  git pull

== More

* {Project Website}[http://sinatra.github.com/] - Additional documentation,
  news, and links to other resources.
* {Contributing}[http://sinatra.github.com/contributing.html] - Find a bug? Need
  help? Have a patch?
* {Lighthouse}[http://sinatra.lighthouseapp.com] - Issue tracking and release
  planning.
* {Twitter}[http://twitter.com/sinatra]
* {Mailing List}[http://groups.google.com/group/sinatrarb]
* {IRC: #sinatra}[irc://chat.freenode.net/#sinatra] on http://freenode.net
